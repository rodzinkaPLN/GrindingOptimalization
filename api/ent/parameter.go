// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/dataset"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/parameter"
)

// Parameter is the model entity for the Parameter schema.
type Parameter struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// DatasetID holds the value of the "dataset_id" field.
	DatasetID uuid.UUID `json:"dataset_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ParameterQuery when eager-loading is set.
	Edges ParameterEdges `json:"edges"`
}

// ParameterEdges holds the relations/edges for other nodes in the graph.
type ParameterEdges struct {
	// Datasets holds the value of the datasets edge.
	Datasets *Dataset `json:"datasets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DatasetsOrErr returns the Datasets value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ParameterEdges) DatasetsOrErr() (*Dataset, error) {
	if e.loadedTypes[0] {
		if e.Datasets == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: dataset.Label}
		}
		return e.Datasets, nil
	}
	return nil, &NotLoadedError{edge: "datasets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Parameter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case parameter.FieldName, parameter.FieldUnit:
			values[i] = new(sql.NullString)
		case parameter.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case parameter.FieldID, parameter.FieldDatasetID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Parameter", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Parameter fields.
func (pa *Parameter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case parameter.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pa.ID = *value
			}
		case parameter.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pa.Name = value.String
			}
		case parameter.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				pa.Unit = value.String
			}
		case parameter.FieldDatasetID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field dataset_id", values[i])
			} else if value != nil {
				pa.DatasetID = *value
			}
		case parameter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryDatasets queries the "datasets" edge of the Parameter entity.
func (pa *Parameter) QueryDatasets() *DatasetQuery {
	return NewParameterClient(pa.config).QueryDatasets(pa)
}

// Update returns a builder for updating this Parameter.
// Note that you need to call Parameter.Unwrap() before calling this method if this Parameter
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *Parameter) Update() *ParameterUpdateOne {
	return NewParameterClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the Parameter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *Parameter) Unwrap() *Parameter {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: Parameter is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *Parameter) String() string {
	var builder strings.Builder
	builder.WriteString("Parameter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("name=")
	builder.WriteString(pa.Name)
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(pa.Unit)
	builder.WriteString(", ")
	builder.WriteString("dataset_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.DatasetID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Parameters is a parsable slice of Parameter.
type Parameters []*Parameter

func (pa Parameters) config(cfg config) {
	for _i := range pa {
		pa[_i].config = cfg
	}
}
