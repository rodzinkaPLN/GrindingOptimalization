// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/userinput"
)

// Userinput is the model entity for the Userinput schema.
type Userinput struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Min holds the value of the "min" field.
	Min float64 `json:"min,omitempty"`
	// Max holds the value of the "max" field.
	Max float64 `json:"max,omitempty"`
	// Step holds the value of the "step" field.
	Step float64 `json:"step,omitempty"`
	// Defaultval holds the value of the "defaultval" field.
	Defaultval float64 `json:"defaultval,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Userinput) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userinput.FieldMin, userinput.FieldMax, userinput.FieldStep, userinput.FieldDefaultval:
			values[i] = new(sql.NullFloat64)
		case userinput.FieldName:
			values[i] = new(sql.NullString)
		case userinput.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Userinput", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Userinput fields.
func (u *Userinput) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userinput.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case userinput.FieldMin:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min", values[i])
			} else if value.Valid {
				u.Min = value.Float64
			}
		case userinput.FieldMax:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max", values[i])
			} else if value.Valid {
				u.Max = value.Float64
			}
		case userinput.FieldStep:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				u.Step = value.Float64
			}
		case userinput.FieldDefaultval:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field defaultval", values[i])
			} else if value.Valid {
				u.Defaultval = value.Float64
			}
		case userinput.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Userinput.
// Note that you need to call Userinput.Unwrap() before calling this method if this Userinput
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Userinput) Update() *UserinputUpdateOne {
	return NewUserinputClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the Userinput entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *Userinput) Unwrap() *Userinput {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Userinput is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Userinput) String() string {
	var builder strings.Builder
	builder.WriteString("Userinput(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("min=")
	builder.WriteString(fmt.Sprintf("%v", u.Min))
	builder.WriteString(", ")
	builder.WriteString("max=")
	builder.WriteString(fmt.Sprintf("%v", u.Max))
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(fmt.Sprintf("%v", u.Step))
	builder.WriteString(", ")
	builder.WriteString("defaultval=")
	builder.WriteString(fmt.Sprintf("%v", u.Defaultval))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Userinputs is a parsable slice of Userinput.
type Userinputs []*Userinput

func (u Userinputs) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
