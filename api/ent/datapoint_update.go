// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/datapoint"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/parameter"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
)

// DatapointUpdate is the builder for updating Datapoint entities.
type DatapointUpdate struct {
	config
	hooks    []Hook
	mutation *DatapointMutation
}

// Where appends a list predicates to the DatapointUpdate builder.
func (du *DatapointUpdate) Where(ps ...predicate.Datapoint) *DatapointUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDataTime sets the "data_time" field.
func (du *DatapointUpdate) SetDataTime(t time.Time) *DatapointUpdate {
	du.mutation.SetDataTime(t)
	return du
}

// SetParameterID sets the "parameter_id" field.
func (du *DatapointUpdate) SetParameterID(u uuid.UUID) *DatapointUpdate {
	du.mutation.SetParameterID(u)
	return du
}

// SetNillableParameterID sets the "parameter_id" field if the given value is not nil.
func (du *DatapointUpdate) SetNillableParameterID(u *uuid.UUID) *DatapointUpdate {
	if u != nil {
		du.SetParameterID(*u)
	}
	return du
}

// ClearParameterID clears the value of the "parameter_id" field.
func (du *DatapointUpdate) ClearParameterID() *DatapointUpdate {
	du.mutation.ClearParameterID()
	return du
}

// SetVal sets the "val" field.
func (du *DatapointUpdate) SetVal(f float64) *DatapointUpdate {
	du.mutation.ResetVal()
	du.mutation.SetVal(f)
	return du
}

// AddVal adds f to the "val" field.
func (du *DatapointUpdate) AddVal(f float64) *DatapointUpdate {
	du.mutation.AddVal(f)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DatapointUpdate) SetCreatedAt(t time.Time) *DatapointUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DatapointUpdate) SetNillableCreatedAt(t *time.Time) *DatapointUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetParametersID sets the "parameters" edge to the Parameter entity by ID.
func (du *DatapointUpdate) SetParametersID(id uuid.UUID) *DatapointUpdate {
	du.mutation.SetParametersID(id)
	return du
}

// SetNillableParametersID sets the "parameters" edge to the Parameter entity by ID if the given value is not nil.
func (du *DatapointUpdate) SetNillableParametersID(id *uuid.UUID) *DatapointUpdate {
	if id != nil {
		du = du.SetParametersID(*id)
	}
	return du
}

// SetParameters sets the "parameters" edge to the Parameter entity.
func (du *DatapointUpdate) SetParameters(p *Parameter) *DatapointUpdate {
	return du.SetParametersID(p.ID)
}

// Mutation returns the DatapointMutation object of the builder.
func (du *DatapointUpdate) Mutation() *DatapointMutation {
	return du.mutation
}

// ClearParameters clears the "parameters" edge to the Parameter entity.
func (du *DatapointUpdate) ClearParameters() *DatapointUpdate {
	du.mutation.ClearParameters()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatapointUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DatapointMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatapointUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatapointUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatapointUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DatapointUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datapoint.Table,
			Columns: datapoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: datapoint.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DataTime(); ok {
		_spec.SetField(datapoint.FieldDataTime, field.TypeTime, value)
	}
	if value, ok := du.mutation.Val(); ok {
		_spec.SetField(datapoint.FieldVal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedVal(); ok {
		_spec.AddField(datapoint.FieldVal, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(datapoint.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.ParametersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   datapoint.ParametersTable,
			Columns: []string{datapoint.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParametersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   datapoint.ParametersTable,
			Columns: []string{datapoint.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datapoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DatapointUpdateOne is the builder for updating a single Datapoint entity.
type DatapointUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DatapointMutation
}

// SetDataTime sets the "data_time" field.
func (duo *DatapointUpdateOne) SetDataTime(t time.Time) *DatapointUpdateOne {
	duo.mutation.SetDataTime(t)
	return duo
}

// SetParameterID sets the "parameter_id" field.
func (duo *DatapointUpdateOne) SetParameterID(u uuid.UUID) *DatapointUpdateOne {
	duo.mutation.SetParameterID(u)
	return duo
}

// SetNillableParameterID sets the "parameter_id" field if the given value is not nil.
func (duo *DatapointUpdateOne) SetNillableParameterID(u *uuid.UUID) *DatapointUpdateOne {
	if u != nil {
		duo.SetParameterID(*u)
	}
	return duo
}

// ClearParameterID clears the value of the "parameter_id" field.
func (duo *DatapointUpdateOne) ClearParameterID() *DatapointUpdateOne {
	duo.mutation.ClearParameterID()
	return duo
}

// SetVal sets the "val" field.
func (duo *DatapointUpdateOne) SetVal(f float64) *DatapointUpdateOne {
	duo.mutation.ResetVal()
	duo.mutation.SetVal(f)
	return duo
}

// AddVal adds f to the "val" field.
func (duo *DatapointUpdateOne) AddVal(f float64) *DatapointUpdateOne {
	duo.mutation.AddVal(f)
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DatapointUpdateOne) SetCreatedAt(t time.Time) *DatapointUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DatapointUpdateOne) SetNillableCreatedAt(t *time.Time) *DatapointUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetParametersID sets the "parameters" edge to the Parameter entity by ID.
func (duo *DatapointUpdateOne) SetParametersID(id uuid.UUID) *DatapointUpdateOne {
	duo.mutation.SetParametersID(id)
	return duo
}

// SetNillableParametersID sets the "parameters" edge to the Parameter entity by ID if the given value is not nil.
func (duo *DatapointUpdateOne) SetNillableParametersID(id *uuid.UUID) *DatapointUpdateOne {
	if id != nil {
		duo = duo.SetParametersID(*id)
	}
	return duo
}

// SetParameters sets the "parameters" edge to the Parameter entity.
func (duo *DatapointUpdateOne) SetParameters(p *Parameter) *DatapointUpdateOne {
	return duo.SetParametersID(p.ID)
}

// Mutation returns the DatapointMutation object of the builder.
func (duo *DatapointUpdateOne) Mutation() *DatapointMutation {
	return duo.mutation
}

// ClearParameters clears the "parameters" edge to the Parameter entity.
func (duo *DatapointUpdateOne) ClearParameters() *DatapointUpdateOne {
	duo.mutation.ClearParameters()
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DatapointUpdateOne) Select(field string, fields ...string) *DatapointUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Datapoint entity.
func (duo *DatapointUpdateOne) Save(ctx context.Context) (*Datapoint, error) {
	return withHooks[*Datapoint, DatapointMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatapointUpdateOne) SaveX(ctx context.Context) *Datapoint {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatapointUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatapointUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DatapointUpdateOne) sqlSave(ctx context.Context) (_node *Datapoint, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   datapoint.Table,
			Columns: datapoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: datapoint.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Datapoint.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, datapoint.FieldID)
		for _, f := range fields {
			if !datapoint.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != datapoint.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DataTime(); ok {
		_spec.SetField(datapoint.FieldDataTime, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Val(); ok {
		_spec.SetField(datapoint.FieldVal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedVal(); ok {
		_spec.AddField(datapoint.FieldVal, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(datapoint.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.ParametersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   datapoint.ParametersTable,
			Columns: []string{datapoint.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParametersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   datapoint.ParametersTable,
			Columns: []string{datapoint.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Datapoint{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{datapoint.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
