// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/dataset"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/parameter"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
)

// DatasetUpdate is the builder for updating Dataset entities.
type DatasetUpdate struct {
	config
	hooks    []Hook
	mutation *DatasetMutation
}

// Where appends a list predicates to the DatasetUpdate builder.
func (du *DatasetUpdate) Where(ps ...predicate.Dataset) *DatasetUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DatasetUpdate) SetName(s string) *DatasetUpdate {
	du.mutation.SetName(s)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DatasetUpdate) SetCreatedAt(t time.Time) *DatasetUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DatasetUpdate) SetNillableCreatedAt(t *time.Time) *DatasetUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// AddParameterIDs adds the "parameters" edge to the Parameter entity by IDs.
func (du *DatasetUpdate) AddParameterIDs(ids ...uuid.UUID) *DatasetUpdate {
	du.mutation.AddParameterIDs(ids...)
	return du
}

// AddParameters adds the "parameters" edges to the Parameter entity.
func (du *DatasetUpdate) AddParameters(p ...*Parameter) *DatasetUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddParameterIDs(ids...)
}

// Mutation returns the DatasetMutation object of the builder.
func (du *DatasetUpdate) Mutation() *DatasetMutation {
	return du.mutation
}

// ClearParameters clears all "parameters" edges to the Parameter entity.
func (du *DatasetUpdate) ClearParameters() *DatasetUpdate {
	du.mutation.ClearParameters()
	return du
}

// RemoveParameterIDs removes the "parameters" edge to Parameter entities by IDs.
func (du *DatasetUpdate) RemoveParameterIDs(ids ...uuid.UUID) *DatasetUpdate {
	du.mutation.RemoveParameterIDs(ids...)
	return du
}

// RemoveParameters removes "parameters" edges to Parameter entities.
func (du *DatasetUpdate) RemoveParameters(p ...*Parameter) *DatasetUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemoveParameterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatasetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, DatasetMutation](ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatasetUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatasetUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatasetUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DatasetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataset.Table,
			Columns: dataset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dataset.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(dataset.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(dataset.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.ParametersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ParametersTable,
			Columns: []string{dataset.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedParametersIDs(); len(nodes) > 0 && !du.mutation.ParametersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ParametersTable,
			Columns: []string{dataset.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ParametersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ParametersTable,
			Columns: []string{dataset.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DatasetUpdateOne is the builder for updating a single Dataset entity.
type DatasetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DatasetMutation
}

// SetName sets the "name" field.
func (duo *DatasetUpdateOne) SetName(s string) *DatasetUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DatasetUpdateOne) SetCreatedAt(t time.Time) *DatasetUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DatasetUpdateOne) SetNillableCreatedAt(t *time.Time) *DatasetUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// AddParameterIDs adds the "parameters" edge to the Parameter entity by IDs.
func (duo *DatasetUpdateOne) AddParameterIDs(ids ...uuid.UUID) *DatasetUpdateOne {
	duo.mutation.AddParameterIDs(ids...)
	return duo
}

// AddParameters adds the "parameters" edges to the Parameter entity.
func (duo *DatasetUpdateOne) AddParameters(p ...*Parameter) *DatasetUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddParameterIDs(ids...)
}

// Mutation returns the DatasetMutation object of the builder.
func (duo *DatasetUpdateOne) Mutation() *DatasetMutation {
	return duo.mutation
}

// ClearParameters clears all "parameters" edges to the Parameter entity.
func (duo *DatasetUpdateOne) ClearParameters() *DatasetUpdateOne {
	duo.mutation.ClearParameters()
	return duo
}

// RemoveParameterIDs removes the "parameters" edge to Parameter entities by IDs.
func (duo *DatasetUpdateOne) RemoveParameterIDs(ids ...uuid.UUID) *DatasetUpdateOne {
	duo.mutation.RemoveParameterIDs(ids...)
	return duo
}

// RemoveParameters removes "parameters" edges to Parameter entities.
func (duo *DatasetUpdateOne) RemoveParameters(p ...*Parameter) *DatasetUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemoveParameterIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DatasetUpdateOne) Select(field string, fields ...string) *DatasetUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dataset entity.
func (duo *DatasetUpdateOne) Save(ctx context.Context) (*Dataset, error) {
	return withHooks[*Dataset, DatasetMutation](ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatasetUpdateOne) SaveX(ctx context.Context) *Dataset {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatasetUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatasetUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DatasetUpdateOne) sqlSave(ctx context.Context) (_node *Dataset, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dataset.Table,
			Columns: dataset.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dataset.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dataset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dataset.FieldID)
		for _, f := range fields {
			if !dataset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dataset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(dataset.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(dataset.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.ParametersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ParametersTable,
			Columns: []string{dataset.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedParametersIDs(); len(nodes) > 0 && !duo.mutation.ParametersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ParametersTable,
			Columns: []string{dataset.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ParametersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dataset.ParametersTable,
			Columns: []string{dataset.ParametersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: parameter.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Dataset{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dataset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
