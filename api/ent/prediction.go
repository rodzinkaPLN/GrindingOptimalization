// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/prediction"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/schema"
)

// Prediction is the model entity for the Prediction schema.
type Prediction struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// DataTime holds the value of the "data_time" field.
	DataTime time.Time `json:"data_time,omitempty"`
	// Vals holds the value of the "vals" field.
	Vals schema.DataT `json:"vals,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prediction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prediction.FieldVals:
			values[i] = new([]byte)
		case prediction.FieldDataTime, prediction.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case prediction.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Prediction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prediction fields.
func (pr *Prediction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prediction.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				pr.ID = *value
			}
		case prediction.FieldDataTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field data_time", values[i])
			} else if value.Valid {
				pr.DataTime = value.Time
			}
		case prediction.FieldVals:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field vals", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pr.Vals); err != nil {
					return fmt.Errorf("unmarshal field vals: %w", err)
				}
			}
		case prediction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Prediction.
// Note that you need to call Prediction.Unwrap() before calling this method if this Prediction
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prediction) Update() *PredictionUpdateOne {
	return NewPredictionClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Prediction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prediction) Unwrap() *Prediction {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prediction is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prediction) String() string {
	var builder strings.Builder
	builder.WriteString("Prediction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("data_time=")
	builder.WriteString(pr.DataTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("vals=")
	builder.WriteString(fmt.Sprintf("%v", pr.Vals))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Predictions is a parsable slice of Prediction.
type Predictions []*Prediction

func (pr Predictions) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
