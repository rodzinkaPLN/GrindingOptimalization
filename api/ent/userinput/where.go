// Code generated by ent, DO NOT EDIT.

package userinput

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Userinput {
	return predicate.Userinput(sql.FieldLTE(FieldID, id))
}

// Min applies equality check predicate on the "min" field. It's identical to MinEQ.
func Min(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldMin, v))
}

// Max applies equality check predicate on the "max" field. It's identical to MaxEQ.
func Max(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldMax, v))
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldStep, v))
}

// Defaultval applies equality check predicate on the "defaultval" field. It's identical to DefaultvalEQ.
func Defaultval(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldDefaultval, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldName, v))
}

// MinEQ applies the EQ predicate on the "min" field.
func MinEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldMin, v))
}

// MinNEQ applies the NEQ predicate on the "min" field.
func MinNEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNEQ(FieldMin, v))
}

// MinIn applies the In predicate on the "min" field.
func MinIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldIn(FieldMin, vs...))
}

// MinNotIn applies the NotIn predicate on the "min" field.
func MinNotIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNotIn(FieldMin, vs...))
}

// MinGT applies the GT predicate on the "min" field.
func MinGT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGT(FieldMin, v))
}

// MinGTE applies the GTE predicate on the "min" field.
func MinGTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGTE(FieldMin, v))
}

// MinLT applies the LT predicate on the "min" field.
func MinLT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLT(FieldMin, v))
}

// MinLTE applies the LTE predicate on the "min" field.
func MinLTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLTE(FieldMin, v))
}

// MaxEQ applies the EQ predicate on the "max" field.
func MaxEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldMax, v))
}

// MaxNEQ applies the NEQ predicate on the "max" field.
func MaxNEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNEQ(FieldMax, v))
}

// MaxIn applies the In predicate on the "max" field.
func MaxIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldIn(FieldMax, vs...))
}

// MaxNotIn applies the NotIn predicate on the "max" field.
func MaxNotIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNotIn(FieldMax, vs...))
}

// MaxGT applies the GT predicate on the "max" field.
func MaxGT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGT(FieldMax, v))
}

// MaxGTE applies the GTE predicate on the "max" field.
func MaxGTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGTE(FieldMax, v))
}

// MaxLT applies the LT predicate on the "max" field.
func MaxLT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLT(FieldMax, v))
}

// MaxLTE applies the LTE predicate on the "max" field.
func MaxLTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLTE(FieldMax, v))
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldStep, v))
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNEQ(FieldStep, v))
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldIn(FieldStep, vs...))
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNotIn(FieldStep, vs...))
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGT(FieldStep, v))
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGTE(FieldStep, v))
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLT(FieldStep, v))
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLTE(FieldStep, v))
}

// DefaultvalEQ applies the EQ predicate on the "defaultval" field.
func DefaultvalEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldDefaultval, v))
}

// DefaultvalNEQ applies the NEQ predicate on the "defaultval" field.
func DefaultvalNEQ(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNEQ(FieldDefaultval, v))
}

// DefaultvalIn applies the In predicate on the "defaultval" field.
func DefaultvalIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldIn(FieldDefaultval, vs...))
}

// DefaultvalNotIn applies the NotIn predicate on the "defaultval" field.
func DefaultvalNotIn(vs ...float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldNotIn(FieldDefaultval, vs...))
}

// DefaultvalGT applies the GT predicate on the "defaultval" field.
func DefaultvalGT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGT(FieldDefaultval, v))
}

// DefaultvalGTE applies the GTE predicate on the "defaultval" field.
func DefaultvalGTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldGTE(FieldDefaultval, v))
}

// DefaultvalLT applies the LT predicate on the "defaultval" field.
func DefaultvalLT(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLT(FieldDefaultval, v))
}

// DefaultvalLTE applies the LTE predicate on the "defaultval" field.
func DefaultvalLTE(v float64) predicate.Userinput {
	return predicate.Userinput(sql.FieldLTE(FieldDefaultval, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Userinput {
	return predicate.Userinput(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Userinput {
	return predicate.Userinput(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Userinput {
	return predicate.Userinput(sql.FieldContainsFold(FieldName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Userinput) predicate.Userinput {
	return predicate.Userinput(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Userinput) predicate.Userinput {
	return predicate.Userinput(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Userinput) predicate.Userinput {
	return predicate.Userinput(func(s *sql.Selector) {
		p(s.Not())
	})
}
