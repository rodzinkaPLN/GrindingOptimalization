// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DatapointsColumns holds the columns for the "datapoints" table.
	DatapointsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "data_time", Type: field.TypeTime},
		{Name: "vals", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "dataset_id", Type: field.TypeUUID, Nullable: true},
	}
	// DatapointsTable holds the schema information for the "datapoints" table.
	DatapointsTable = &schema.Table{
		Name:       "datapoints",
		Columns:    DatapointsColumns,
		PrimaryKey: []*schema.Column{DatapointsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "datapoints_datasets_datapoints",
				Columns:    []*schema.Column{DatapointsColumns[4]},
				RefColumns: []*schema.Column{DatasetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DatasetsColumns holds the columns for the "datasets" table.
	DatasetsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// DatasetsTable holds the schema information for the "datasets" table.
	DatasetsTable = &schema.Table{
		Name:       "datasets",
		Columns:    DatasetsColumns,
		PrimaryKey: []*schema.Column{DatasetsColumns[0]},
	}
	// ParametersColumns holds the columns for the "parameters" table.
	ParametersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "unit", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "dataset_id", Type: field.TypeUUID, Nullable: true},
	}
	// ParametersTable holds the schema information for the "parameters" table.
	ParametersTable = &schema.Table{
		Name:       "parameters",
		Columns:    ParametersColumns,
		PrimaryKey: []*schema.Column{ParametersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "parameters_datasets_parameters",
				Columns:    []*schema.Column{ParametersColumns[4]},
				RefColumns: []*schema.Column{DatasetsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PredictionsColumns holds the columns for the "predictions" table.
	PredictionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "data_time", Type: field.TypeTime},
		{Name: "vals", Type: field.TypeJSON},
		{Name: "created_at", Type: field.TypeTime},
	}
	// PredictionsTable holds the schema information for the "predictions" table.
	PredictionsTable = &schema.Table{
		Name:       "predictions",
		Columns:    PredictionsColumns,
		PrimaryKey: []*schema.Column{PredictionsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DatapointsTable,
		DatasetsTable,
		ParametersTable,
		PredictionsTable,
	}
)

func init() {
	DatapointsTable.ForeignKeys[0].RefTable = DatasetsTable
	ParametersTable.ForeignKeys[0].RefTable = DatasetsTable
}
