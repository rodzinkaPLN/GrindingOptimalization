// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/prediction"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/schema"
)

// PredictionUpdate is the builder for updating Prediction entities.
type PredictionUpdate struct {
	config
	hooks    []Hook
	mutation *PredictionMutation
}

// Where appends a list predicates to the PredictionUpdate builder.
func (pu *PredictionUpdate) Where(ps ...predicate.Prediction) *PredictionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDataTime sets the "data_time" field.
func (pu *PredictionUpdate) SetDataTime(t time.Time) *PredictionUpdate {
	pu.mutation.SetDataTime(t)
	return pu
}

// SetVals sets the "vals" field.
func (pu *PredictionUpdate) SetVals(s schema.DataT) *PredictionUpdate {
	pu.mutation.SetVals(s)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PredictionUpdate) SetCreatedAt(t time.Time) *PredictionUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PredictionUpdate) SetNillableCreatedAt(t *time.Time) *PredictionUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// Mutation returns the PredictionMutation object of the builder.
func (pu *PredictionUpdate) Mutation() *PredictionMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PredictionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, PredictionMutation](ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PredictionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PredictionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PredictionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PredictionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prediction.Table,
			Columns: prediction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: prediction.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.DataTime(); ok {
		_spec.SetField(prediction.FieldDataTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Vals(); ok {
		_spec.SetField(prediction.FieldVals, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(prediction.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prediction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PredictionUpdateOne is the builder for updating a single Prediction entity.
type PredictionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PredictionMutation
}

// SetDataTime sets the "data_time" field.
func (puo *PredictionUpdateOne) SetDataTime(t time.Time) *PredictionUpdateOne {
	puo.mutation.SetDataTime(t)
	return puo
}

// SetVals sets the "vals" field.
func (puo *PredictionUpdateOne) SetVals(s schema.DataT) *PredictionUpdateOne {
	puo.mutation.SetVals(s)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PredictionUpdateOne) SetCreatedAt(t time.Time) *PredictionUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PredictionUpdateOne) SetNillableCreatedAt(t *time.Time) *PredictionUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// Mutation returns the PredictionMutation object of the builder.
func (puo *PredictionUpdateOne) Mutation() *PredictionMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PredictionUpdateOne) Select(field string, fields ...string) *PredictionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prediction entity.
func (puo *PredictionUpdateOne) Save(ctx context.Context) (*Prediction, error) {
	return withHooks[*Prediction, PredictionMutation](ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PredictionUpdateOne) SaveX(ctx context.Context) *Prediction {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PredictionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PredictionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PredictionUpdateOne) sqlSave(ctx context.Context) (_node *Prediction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   prediction.Table,
			Columns: prediction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: prediction.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prediction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prediction.FieldID)
		for _, f := range fields {
			if !prediction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prediction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.DataTime(); ok {
		_spec.SetField(prediction.FieldDataTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Vals(); ok {
		_spec.SetField(prediction.FieldVals, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(prediction.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Prediction{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prediction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
