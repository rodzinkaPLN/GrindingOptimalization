// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/userinput"
)

// UserinputUpdate is the builder for updating Userinput entities.
type UserinputUpdate struct {
	config
	hooks    []Hook
	mutation *UserinputMutation
}

// Where appends a list predicates to the UserinputUpdate builder.
func (uu *UserinputUpdate) Where(ps ...predicate.Userinput) *UserinputUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetMin sets the "min" field.
func (uu *UserinputUpdate) SetMin(f float64) *UserinputUpdate {
	uu.mutation.ResetMin()
	uu.mutation.SetMin(f)
	return uu
}

// AddMin adds f to the "min" field.
func (uu *UserinputUpdate) AddMin(f float64) *UserinputUpdate {
	uu.mutation.AddMin(f)
	return uu
}

// SetMax sets the "max" field.
func (uu *UserinputUpdate) SetMax(f float64) *UserinputUpdate {
	uu.mutation.ResetMax()
	uu.mutation.SetMax(f)
	return uu
}

// AddMax adds f to the "max" field.
func (uu *UserinputUpdate) AddMax(f float64) *UserinputUpdate {
	uu.mutation.AddMax(f)
	return uu
}

// SetStep sets the "step" field.
func (uu *UserinputUpdate) SetStep(f float64) *UserinputUpdate {
	uu.mutation.ResetStep()
	uu.mutation.SetStep(f)
	return uu
}

// AddStep adds f to the "step" field.
func (uu *UserinputUpdate) AddStep(f float64) *UserinputUpdate {
	uu.mutation.AddStep(f)
	return uu
}

// SetDefaultval sets the "defaultval" field.
func (uu *UserinputUpdate) SetDefaultval(f float64) *UserinputUpdate {
	uu.mutation.ResetDefaultval()
	uu.mutation.SetDefaultval(f)
	return uu
}

// AddDefaultval adds f to the "defaultval" field.
func (uu *UserinputUpdate) AddDefaultval(f float64) *UserinputUpdate {
	uu.mutation.AddDefaultval(f)
	return uu
}

// SetName sets the "name" field.
func (uu *UserinputUpdate) SetName(s string) *UserinputUpdate {
	uu.mutation.SetName(s)
	return uu
}

// Mutation returns the UserinputMutation object of the builder.
func (uu *UserinputUpdate) Mutation() *UserinputMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserinputUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserinputMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserinputUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserinputUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserinputUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserinputUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinput.Table,
			Columns: userinput.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userinput.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Min(); ok {
		_spec.SetField(userinput.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedMin(); ok {
		_spec.AddField(userinput.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Max(); ok {
		_spec.SetField(userinput.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedMax(); ok {
		_spec.AddField(userinput.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Step(); ok {
		_spec.SetField(userinput.FieldStep, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedStep(); ok {
		_spec.AddField(userinput.FieldStep, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Defaultval(); ok {
		_spec.SetField(userinput.FieldDefaultval, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.AddedDefaultval(); ok {
		_spec.AddField(userinput.FieldDefaultval, field.TypeFloat64, value)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(userinput.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinput.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserinputUpdateOne is the builder for updating a single Userinput entity.
type UserinputUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserinputMutation
}

// SetMin sets the "min" field.
func (uuo *UserinputUpdateOne) SetMin(f float64) *UserinputUpdateOne {
	uuo.mutation.ResetMin()
	uuo.mutation.SetMin(f)
	return uuo
}

// AddMin adds f to the "min" field.
func (uuo *UserinputUpdateOne) AddMin(f float64) *UserinputUpdateOne {
	uuo.mutation.AddMin(f)
	return uuo
}

// SetMax sets the "max" field.
func (uuo *UserinputUpdateOne) SetMax(f float64) *UserinputUpdateOne {
	uuo.mutation.ResetMax()
	uuo.mutation.SetMax(f)
	return uuo
}

// AddMax adds f to the "max" field.
func (uuo *UserinputUpdateOne) AddMax(f float64) *UserinputUpdateOne {
	uuo.mutation.AddMax(f)
	return uuo
}

// SetStep sets the "step" field.
func (uuo *UserinputUpdateOne) SetStep(f float64) *UserinputUpdateOne {
	uuo.mutation.ResetStep()
	uuo.mutation.SetStep(f)
	return uuo
}

// AddStep adds f to the "step" field.
func (uuo *UserinputUpdateOne) AddStep(f float64) *UserinputUpdateOne {
	uuo.mutation.AddStep(f)
	return uuo
}

// SetDefaultval sets the "defaultval" field.
func (uuo *UserinputUpdateOne) SetDefaultval(f float64) *UserinputUpdateOne {
	uuo.mutation.ResetDefaultval()
	uuo.mutation.SetDefaultval(f)
	return uuo
}

// AddDefaultval adds f to the "defaultval" field.
func (uuo *UserinputUpdateOne) AddDefaultval(f float64) *UserinputUpdateOne {
	uuo.mutation.AddDefaultval(f)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserinputUpdateOne) SetName(s string) *UserinputUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// Mutation returns the UserinputMutation object of the builder.
func (uuo *UserinputUpdateOne) Mutation() *UserinputMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserinputUpdateOne) Select(field string, fields ...string) *UserinputUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated Userinput entity.
func (uuo *UserinputUpdateOne) Save(ctx context.Context) (*Userinput, error) {
	return withHooks[*Userinput, UserinputMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserinputUpdateOne) SaveX(ctx context.Context) *Userinput {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserinputUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserinputUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserinputUpdateOne) sqlSave(ctx context.Context) (_node *Userinput, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userinput.Table,
			Columns: userinput.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: userinput.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Userinput.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinput.FieldID)
		for _, f := range fields {
			if !userinput.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinput.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Min(); ok {
		_spec.SetField(userinput.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedMin(); ok {
		_spec.AddField(userinput.FieldMin, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Max(); ok {
		_spec.SetField(userinput.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedMax(); ok {
		_spec.AddField(userinput.FieldMax, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Step(); ok {
		_spec.SetField(userinput.FieldStep, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedStep(); ok {
		_spec.AddField(userinput.FieldStep, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Defaultval(); ok {
		_spec.SetField(userinput.FieldDefaultval, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.AddedDefaultval(); ok {
		_spec.AddField(userinput.FieldDefaultval, field.TypeFloat64, value)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(userinput.FieldName, field.TypeString, value)
	}
	_node = &Userinput{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinput.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
