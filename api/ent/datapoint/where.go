// Code generated by ent, DO NOT EDIT.

package datapoint

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldLTE(FieldID, id))
}

// DataTime applies equality check predicate on the "data_time" field. It's identical to DataTimeEQ.
func DataTime(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldDataTime, v))
}

// DatasetID applies equality check predicate on the "dataset_id" field. It's identical to DatasetIDEQ.
func DatasetID(v uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldDatasetID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldCreatedAt, v))
}

// DataTimeEQ applies the EQ predicate on the "data_time" field.
func DataTimeEQ(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldDataTime, v))
}

// DataTimeNEQ applies the NEQ predicate on the "data_time" field.
func DataTimeNEQ(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNEQ(FieldDataTime, v))
}

// DataTimeIn applies the In predicate on the "data_time" field.
func DataTimeIn(vs ...time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldIn(FieldDataTime, vs...))
}

// DataTimeNotIn applies the NotIn predicate on the "data_time" field.
func DataTimeNotIn(vs ...time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNotIn(FieldDataTime, vs...))
}

// DataTimeGT applies the GT predicate on the "data_time" field.
func DataTimeGT(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldGT(FieldDataTime, v))
}

// DataTimeGTE applies the GTE predicate on the "data_time" field.
func DataTimeGTE(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldGTE(FieldDataTime, v))
}

// DataTimeLT applies the LT predicate on the "data_time" field.
func DataTimeLT(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldLT(FieldDataTime, v))
}

// DataTimeLTE applies the LTE predicate on the "data_time" field.
func DataTimeLTE(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldLTE(FieldDataTime, v))
}

// DatasetIDEQ applies the EQ predicate on the "dataset_id" field.
func DatasetIDEQ(v uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldDatasetID, v))
}

// DatasetIDNEQ applies the NEQ predicate on the "dataset_id" field.
func DatasetIDNEQ(v uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNEQ(FieldDatasetID, v))
}

// DatasetIDIn applies the In predicate on the "dataset_id" field.
func DatasetIDIn(vs ...uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldIn(FieldDatasetID, vs...))
}

// DatasetIDNotIn applies the NotIn predicate on the "dataset_id" field.
func DatasetIDNotIn(vs ...uuid.UUID) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNotIn(FieldDatasetID, vs...))
}

// DatasetIDIsNil applies the IsNil predicate on the "dataset_id" field.
func DatasetIDIsNil() predicate.Datapoint {
	return predicate.Datapoint(sql.FieldIsNull(FieldDatasetID))
}

// DatasetIDNotNil applies the NotNil predicate on the "dataset_id" field.
func DatasetIDNotNil() predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNotNull(FieldDatasetID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Datapoint {
	return predicate.Datapoint(sql.FieldLTE(FieldCreatedAt, v))
}

// HasDatasets applies the HasEdge predicate on the "datasets" edge.
func HasDatasets() predicate.Datapoint {
	return predicate.Datapoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DatasetsTable, DatasetsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDatasetsWith applies the HasEdge predicate on the "datasets" edge with a given conditions (other predicates).
func HasDatasetsWith(preds ...predicate.Dataset) predicate.Datapoint {
	return predicate.Datapoint(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DatasetsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DatasetsTable, DatasetsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Datapoint) predicate.Datapoint {
	return predicate.Datapoint(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Datapoint) predicate.Datapoint {
	return predicate.Datapoint(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Datapoint) predicate.Datapoint {
	return predicate.Datapoint(func(s *sql.Selector) {
		p(s.Not())
	})
}
