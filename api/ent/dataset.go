// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/dataset"
)

// Dataset is the model entity for the Dataset schema.
type Dataset struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatasetQuery when eager-loading is set.
	Edges DatasetEdges `json:"edges"`
}

// DatasetEdges holds the relations/edges for other nodes in the graph.
type DatasetEdges struct {
	// Parameters holds the value of the parameters edge.
	Parameters []*Parameter `json:"parameters,omitempty"`
	// Datapoints holds the value of the datapoints edge.
	Datapoints []*Datapoint `json:"datapoints,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ParametersOrErr returns the Parameters value or an error if the edge
// was not loaded in eager-loading.
func (e DatasetEdges) ParametersOrErr() ([]*Parameter, error) {
	if e.loadedTypes[0] {
		return e.Parameters, nil
	}
	return nil, &NotLoadedError{edge: "parameters"}
}

// DatapointsOrErr returns the Datapoints value or an error if the edge
// was not loaded in eager-loading.
func (e DatasetEdges) DatapointsOrErr() ([]*Datapoint, error) {
	if e.loadedTypes[1] {
		return e.Datapoints, nil
	}
	return nil, &NotLoadedError{edge: "datapoints"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dataset) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dataset.FieldName:
			values[i] = new(sql.NullString)
		case dataset.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case dataset.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dataset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dataset fields.
func (d *Dataset) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dataset.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case dataset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dataset.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryParameters queries the "parameters" edge of the Dataset entity.
func (d *Dataset) QueryParameters() *ParameterQuery {
	return NewDatasetClient(d.config).QueryParameters(d)
}

// QueryDatapoints queries the "datapoints" edge of the Dataset entity.
func (d *Dataset) QueryDatapoints() *DatapointQuery {
	return NewDatasetClient(d.config).QueryDatapoints(d)
}

// Update returns a builder for updating this Dataset.
// Note that you need to call Dataset.Unwrap() before calling this method if this Dataset
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dataset) Update() *DatasetUpdateOne {
	return NewDatasetClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dataset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dataset) Unwrap() *Dataset {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dataset is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dataset) String() string {
	var builder strings.Builder
	builder.WriteString("Dataset(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Datasets is a parsable slice of Dataset.
type Datasets []*Dataset

func (d Datasets) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
