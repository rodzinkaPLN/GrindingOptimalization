// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/datapoint"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/dataset"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/parameter"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/prediction"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/schema"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/userinput"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDatapoint  = "Datapoint"
	TypeDataset    = "Dataset"
	TypeParameter  = "Parameter"
	TypePrediction = "Prediction"
	TypeUserinput  = "Userinput"
)

// DatapointMutation represents an operation that mutates the Datapoint nodes in the graph.
type DatapointMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	data_time       *time.Time
	vals            *schema.DataT
	created_at      *time.Time
	clearedFields   map[string]struct{}
	datasets        *uuid.UUID
	cleareddatasets bool
	done            bool
	oldValue        func(context.Context) (*Datapoint, error)
	predicates      []predicate.Datapoint
}

var _ ent.Mutation = (*DatapointMutation)(nil)

// datapointOption allows management of the mutation configuration using functional options.
type datapointOption func(*DatapointMutation)

// newDatapointMutation creates new mutation for the Datapoint entity.
func newDatapointMutation(c config, op Op, opts ...datapointOption) *DatapointMutation {
	m := &DatapointMutation{
		config:        c,
		op:            op,
		typ:           TypeDatapoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatapointID sets the ID field of the mutation.
func withDatapointID(id uuid.UUID) datapointOption {
	return func(m *DatapointMutation) {
		var (
			err   error
			once  sync.Once
			value *Datapoint
		)
		m.oldValue = func(ctx context.Context) (*Datapoint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Datapoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDatapoint sets the old Datapoint of the mutation.
func withDatapoint(node *Datapoint) datapointOption {
	return func(m *DatapointMutation) {
		m.oldValue = func(context.Context) (*Datapoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatapointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatapointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Datapoint entities.
func (m *DatapointMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatapointMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatapointMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Datapoint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDataTime sets the "data_time" field.
func (m *DatapointMutation) SetDataTime(t time.Time) {
	m.data_time = &t
}

// DataTime returns the value of the "data_time" field in the mutation.
func (m *DatapointMutation) DataTime() (r time.Time, exists bool) {
	v := m.data_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDataTime returns the old "data_time" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldDataTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataTime: %w", err)
	}
	return oldValue.DataTime, nil
}

// ResetDataTime resets all changes to the "data_time" field.
func (m *DatapointMutation) ResetDataTime() {
	m.data_time = nil
}

// SetDatasetID sets the "dataset_id" field.
func (m *DatapointMutation) SetDatasetID(u uuid.UUID) {
	m.datasets = &u
}

// DatasetID returns the value of the "dataset_id" field in the mutation.
func (m *DatapointMutation) DatasetID() (r uuid.UUID, exists bool) {
	v := m.datasets
	if v == nil {
		return
	}
	return *v, true
}

// OldDatasetID returns the old "dataset_id" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldDatasetID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatasetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatasetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatasetID: %w", err)
	}
	return oldValue.DatasetID, nil
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (m *DatapointMutation) ClearDatasetID() {
	m.datasets = nil
	m.clearedFields[datapoint.FieldDatasetID] = struct{}{}
}

// DatasetIDCleared returns if the "dataset_id" field was cleared in this mutation.
func (m *DatapointMutation) DatasetIDCleared() bool {
	_, ok := m.clearedFields[datapoint.FieldDatasetID]
	return ok
}

// ResetDatasetID resets all changes to the "dataset_id" field.
func (m *DatapointMutation) ResetDatasetID() {
	m.datasets = nil
	delete(m.clearedFields, datapoint.FieldDatasetID)
}

// SetVals sets the "vals" field.
func (m *DatapointMutation) SetVals(s schema.DataT) {
	m.vals = &s
}

// Vals returns the value of the "vals" field in the mutation.
func (m *DatapointMutation) Vals() (r schema.DataT, exists bool) {
	v := m.vals
	if v == nil {
		return
	}
	return *v, true
}

// OldVals returns the old "vals" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldVals(ctx context.Context) (v schema.DataT, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVals: %w", err)
	}
	return oldValue.Vals, nil
}

// ResetVals resets all changes to the "vals" field.
func (m *DatapointMutation) ResetVals() {
	m.vals = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DatapointMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DatapointMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DatapointMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDatasetsID sets the "datasets" edge to the Dataset entity by id.
func (m *DatapointMutation) SetDatasetsID(id uuid.UUID) {
	m.datasets = &id
}

// ClearDatasets clears the "datasets" edge to the Dataset entity.
func (m *DatapointMutation) ClearDatasets() {
	m.cleareddatasets = true
}

// DatasetsCleared reports if the "datasets" edge to the Dataset entity was cleared.
func (m *DatapointMutation) DatasetsCleared() bool {
	return m.DatasetIDCleared() || m.cleareddatasets
}

// DatasetsID returns the "datasets" edge ID in the mutation.
func (m *DatapointMutation) DatasetsID() (id uuid.UUID, exists bool) {
	if m.datasets != nil {
		return *m.datasets, true
	}
	return
}

// DatasetsIDs returns the "datasets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DatasetsID instead. It exists only for internal usage by the builders.
func (m *DatapointMutation) DatasetsIDs() (ids []uuid.UUID) {
	if id := m.datasets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDatasets resets all changes to the "datasets" edge.
func (m *DatapointMutation) ResetDatasets() {
	m.datasets = nil
	m.cleareddatasets = false
}

// Where appends a list predicates to the DatapointMutation builder.
func (m *DatapointMutation) Where(ps ...predicate.Datapoint) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatapointMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatapointMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Datapoint, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatapointMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatapointMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Datapoint).
func (m *DatapointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatapointMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.data_time != nil {
		fields = append(fields, datapoint.FieldDataTime)
	}
	if m.datasets != nil {
		fields = append(fields, datapoint.FieldDatasetID)
	}
	if m.vals != nil {
		fields = append(fields, datapoint.FieldVals)
	}
	if m.created_at != nil {
		fields = append(fields, datapoint.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatapointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case datapoint.FieldDataTime:
		return m.DataTime()
	case datapoint.FieldDatasetID:
		return m.DatasetID()
	case datapoint.FieldVals:
		return m.Vals()
	case datapoint.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatapointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case datapoint.FieldDataTime:
		return m.OldDataTime(ctx)
	case datapoint.FieldDatasetID:
		return m.OldDatasetID(ctx)
	case datapoint.FieldVals:
		return m.OldVals(ctx)
	case datapoint.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Datapoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatapointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case datapoint.FieldDataTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataTime(v)
		return nil
	case datapoint.FieldDatasetID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatasetID(v)
		return nil
	case datapoint.FieldVals:
		v, ok := value.(schema.DataT)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVals(v)
		return nil
	case datapoint.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Datapoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatapointMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatapointMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatapointMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Datapoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatapointMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(datapoint.FieldDatasetID) {
		fields = append(fields, datapoint.FieldDatasetID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatapointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatapointMutation) ClearField(name string) error {
	switch name {
	case datapoint.FieldDatasetID:
		m.ClearDatasetID()
		return nil
	}
	return fmt.Errorf("unknown Datapoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatapointMutation) ResetField(name string) error {
	switch name {
	case datapoint.FieldDataTime:
		m.ResetDataTime()
		return nil
	case datapoint.FieldDatasetID:
		m.ResetDatasetID()
		return nil
	case datapoint.FieldVals:
		m.ResetVals()
		return nil
	case datapoint.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Datapoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatapointMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.datasets != nil {
		edges = append(edges, datapoint.EdgeDatasets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatapointMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case datapoint.EdgeDatasets:
		if id := m.datasets; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatapointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatapointMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatapointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddatasets {
		edges = append(edges, datapoint.EdgeDatasets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatapointMutation) EdgeCleared(name string) bool {
	switch name {
	case datapoint.EdgeDatasets:
		return m.cleareddatasets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatapointMutation) ClearEdge(name string) error {
	switch name {
	case datapoint.EdgeDatasets:
		m.ClearDatasets()
		return nil
	}
	return fmt.Errorf("unknown Datapoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatapointMutation) ResetEdge(name string) error {
	switch name {
	case datapoint.EdgeDatasets:
		m.ResetDatasets()
		return nil
	}
	return fmt.Errorf("unknown Datapoint edge %s", name)
}

// DatasetMutation represents an operation that mutates the Dataset nodes in the graph.
type DatasetMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	name              *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	parameters        map[uuid.UUID]struct{}
	removedparameters map[uuid.UUID]struct{}
	clearedparameters bool
	datapoints        map[uuid.UUID]struct{}
	removeddatapoints map[uuid.UUID]struct{}
	cleareddatapoints bool
	done              bool
	oldValue          func(context.Context) (*Dataset, error)
	predicates        []predicate.Dataset
}

var _ ent.Mutation = (*DatasetMutation)(nil)

// datasetOption allows management of the mutation configuration using functional options.
type datasetOption func(*DatasetMutation)

// newDatasetMutation creates new mutation for the Dataset entity.
func newDatasetMutation(c config, op Op, opts ...datasetOption) *DatasetMutation {
	m := &DatasetMutation{
		config:        c,
		op:            op,
		typ:           TypeDataset,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatasetID sets the ID field of the mutation.
func withDatasetID(id uuid.UUID) datasetOption {
	return func(m *DatasetMutation) {
		var (
			err   error
			once  sync.Once
			value *Dataset
		)
		m.oldValue = func(ctx context.Context) (*Dataset, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dataset.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDataset sets the old Dataset of the mutation.
func withDataset(node *Dataset) datasetOption {
	return func(m *DatasetMutation) {
		m.oldValue = func(context.Context) (*Dataset, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatasetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatasetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dataset entities.
func (m *DatasetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatasetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatasetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dataset.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DatasetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DatasetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DatasetMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DatasetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DatasetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DatasetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddParameterIDs adds the "parameters" edge to the Parameter entity by ids.
func (m *DatasetMutation) AddParameterIDs(ids ...uuid.UUID) {
	if m.parameters == nil {
		m.parameters = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.parameters[ids[i]] = struct{}{}
	}
}

// ClearParameters clears the "parameters" edge to the Parameter entity.
func (m *DatasetMutation) ClearParameters() {
	m.clearedparameters = true
}

// ParametersCleared reports if the "parameters" edge to the Parameter entity was cleared.
func (m *DatasetMutation) ParametersCleared() bool {
	return m.clearedparameters
}

// RemoveParameterIDs removes the "parameters" edge to the Parameter entity by IDs.
func (m *DatasetMutation) RemoveParameterIDs(ids ...uuid.UUID) {
	if m.removedparameters == nil {
		m.removedparameters = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.parameters, ids[i])
		m.removedparameters[ids[i]] = struct{}{}
	}
}

// RemovedParameters returns the removed IDs of the "parameters" edge to the Parameter entity.
func (m *DatasetMutation) RemovedParametersIDs() (ids []uuid.UUID) {
	for id := range m.removedparameters {
		ids = append(ids, id)
	}
	return
}

// ParametersIDs returns the "parameters" edge IDs in the mutation.
func (m *DatasetMutation) ParametersIDs() (ids []uuid.UUID) {
	for id := range m.parameters {
		ids = append(ids, id)
	}
	return
}

// ResetParameters resets all changes to the "parameters" edge.
func (m *DatasetMutation) ResetParameters() {
	m.parameters = nil
	m.clearedparameters = false
	m.removedparameters = nil
}

// AddDatapointIDs adds the "datapoints" edge to the Datapoint entity by ids.
func (m *DatasetMutation) AddDatapointIDs(ids ...uuid.UUID) {
	if m.datapoints == nil {
		m.datapoints = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.datapoints[ids[i]] = struct{}{}
	}
}

// ClearDatapoints clears the "datapoints" edge to the Datapoint entity.
func (m *DatasetMutation) ClearDatapoints() {
	m.cleareddatapoints = true
}

// DatapointsCleared reports if the "datapoints" edge to the Datapoint entity was cleared.
func (m *DatasetMutation) DatapointsCleared() bool {
	return m.cleareddatapoints
}

// RemoveDatapointIDs removes the "datapoints" edge to the Datapoint entity by IDs.
func (m *DatasetMutation) RemoveDatapointIDs(ids ...uuid.UUID) {
	if m.removeddatapoints == nil {
		m.removeddatapoints = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.datapoints, ids[i])
		m.removeddatapoints[ids[i]] = struct{}{}
	}
}

// RemovedDatapoints returns the removed IDs of the "datapoints" edge to the Datapoint entity.
func (m *DatasetMutation) RemovedDatapointsIDs() (ids []uuid.UUID) {
	for id := range m.removeddatapoints {
		ids = append(ids, id)
	}
	return
}

// DatapointsIDs returns the "datapoints" edge IDs in the mutation.
func (m *DatasetMutation) DatapointsIDs() (ids []uuid.UUID) {
	for id := range m.datapoints {
		ids = append(ids, id)
	}
	return
}

// ResetDatapoints resets all changes to the "datapoints" edge.
func (m *DatasetMutation) ResetDatapoints() {
	m.datapoints = nil
	m.cleareddatapoints = false
	m.removeddatapoints = nil
}

// Where appends a list predicates to the DatasetMutation builder.
func (m *DatasetMutation) Where(ps ...predicate.Dataset) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatasetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatasetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dataset, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatasetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatasetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dataset).
func (m *DatasetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatasetMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, dataset.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, dataset.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatasetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dataset.FieldName:
		return m.Name()
	case dataset.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatasetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dataset.FieldName:
		return m.OldName(ctx)
	case dataset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Dataset field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dataset.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case dataset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Dataset field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatasetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatasetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dataset numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatasetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatasetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatasetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dataset nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatasetMutation) ResetField(name string) error {
	switch name {
	case dataset.FieldName:
		m.ResetName()
		return nil
	case dataset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Dataset field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatasetMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.parameters != nil {
		edges = append(edges, dataset.EdgeParameters)
	}
	if m.datapoints != nil {
		edges = append(edges, dataset.EdgeDatapoints)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatasetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeParameters:
		ids := make([]ent.Value, 0, len(m.parameters))
		for id := range m.parameters {
			ids = append(ids, id)
		}
		return ids
	case dataset.EdgeDatapoints:
		ids := make([]ent.Value, 0, len(m.datapoints))
		for id := range m.datapoints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatasetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedparameters != nil {
		edges = append(edges, dataset.EdgeParameters)
	}
	if m.removeddatapoints != nil {
		edges = append(edges, dataset.EdgeDatapoints)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatasetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeParameters:
		ids := make([]ent.Value, 0, len(m.removedparameters))
		for id := range m.removedparameters {
			ids = append(ids, id)
		}
		return ids
	case dataset.EdgeDatapoints:
		ids := make([]ent.Value, 0, len(m.removeddatapoints))
		for id := range m.removeddatapoints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatasetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedparameters {
		edges = append(edges, dataset.EdgeParameters)
	}
	if m.cleareddatapoints {
		edges = append(edges, dataset.EdgeDatapoints)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatasetMutation) EdgeCleared(name string) bool {
	switch name {
	case dataset.EdgeParameters:
		return m.clearedparameters
	case dataset.EdgeDatapoints:
		return m.cleareddatapoints
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatasetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dataset unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatasetMutation) ResetEdge(name string) error {
	switch name {
	case dataset.EdgeParameters:
		m.ResetParameters()
		return nil
	case dataset.EdgeDatapoints:
		m.ResetDatapoints()
		return nil
	}
	return fmt.Errorf("unknown Dataset edge %s", name)
}

// ParameterMutation represents an operation that mutates the Parameter nodes in the graph.
type ParameterMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	name            *string
	unit            *string
	created_at      *time.Time
	clearedFields   map[string]struct{}
	datasets        *uuid.UUID
	cleareddatasets bool
	done            bool
	oldValue        func(context.Context) (*Parameter, error)
	predicates      []predicate.Parameter
}

var _ ent.Mutation = (*ParameterMutation)(nil)

// parameterOption allows management of the mutation configuration using functional options.
type parameterOption func(*ParameterMutation)

// newParameterMutation creates new mutation for the Parameter entity.
func newParameterMutation(c config, op Op, opts ...parameterOption) *ParameterMutation {
	m := &ParameterMutation{
		config:        c,
		op:            op,
		typ:           TypeParameter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withParameterID sets the ID field of the mutation.
func withParameterID(id uuid.UUID) parameterOption {
	return func(m *ParameterMutation) {
		var (
			err   error
			once  sync.Once
			value *Parameter
		)
		m.oldValue = func(ctx context.Context) (*Parameter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Parameter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withParameter sets the old Parameter of the mutation.
func withParameter(node *Parameter) parameterOption {
	return func(m *ParameterMutation) {
		m.oldValue = func(context.Context) (*Parameter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ParameterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ParameterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Parameter entities.
func (m *ParameterMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ParameterMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ParameterMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Parameter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ParameterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ParameterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ParameterMutation) ResetName() {
	m.name = nil
}

// SetUnit sets the "unit" field.
func (m *ParameterMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *ParameterMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *ParameterMutation) ResetUnit() {
	m.unit = nil
}

// SetDatasetID sets the "dataset_id" field.
func (m *ParameterMutation) SetDatasetID(u uuid.UUID) {
	m.datasets = &u
}

// DatasetID returns the value of the "dataset_id" field in the mutation.
func (m *ParameterMutation) DatasetID() (r uuid.UUID, exists bool) {
	v := m.datasets
	if v == nil {
		return
	}
	return *v, true
}

// OldDatasetID returns the old "dataset_id" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldDatasetID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatasetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatasetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatasetID: %w", err)
	}
	return oldValue.DatasetID, nil
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (m *ParameterMutation) ClearDatasetID() {
	m.datasets = nil
	m.clearedFields[parameter.FieldDatasetID] = struct{}{}
}

// DatasetIDCleared returns if the "dataset_id" field was cleared in this mutation.
func (m *ParameterMutation) DatasetIDCleared() bool {
	_, ok := m.clearedFields[parameter.FieldDatasetID]
	return ok
}

// ResetDatasetID resets all changes to the "dataset_id" field.
func (m *ParameterMutation) ResetDatasetID() {
	m.datasets = nil
	delete(m.clearedFields, parameter.FieldDatasetID)
}

// SetCreatedAt sets the "created_at" field.
func (m *ParameterMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ParameterMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ParameterMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDatasetsID sets the "datasets" edge to the Dataset entity by id.
func (m *ParameterMutation) SetDatasetsID(id uuid.UUID) {
	m.datasets = &id
}

// ClearDatasets clears the "datasets" edge to the Dataset entity.
func (m *ParameterMutation) ClearDatasets() {
	m.cleareddatasets = true
}

// DatasetsCleared reports if the "datasets" edge to the Dataset entity was cleared.
func (m *ParameterMutation) DatasetsCleared() bool {
	return m.DatasetIDCleared() || m.cleareddatasets
}

// DatasetsID returns the "datasets" edge ID in the mutation.
func (m *ParameterMutation) DatasetsID() (id uuid.UUID, exists bool) {
	if m.datasets != nil {
		return *m.datasets, true
	}
	return
}

// DatasetsIDs returns the "datasets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DatasetsID instead. It exists only for internal usage by the builders.
func (m *ParameterMutation) DatasetsIDs() (ids []uuid.UUID) {
	if id := m.datasets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDatasets resets all changes to the "datasets" edge.
func (m *ParameterMutation) ResetDatasets() {
	m.datasets = nil
	m.cleareddatasets = false
}

// Where appends a list predicates to the ParameterMutation builder.
func (m *ParameterMutation) Where(ps ...predicate.Parameter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ParameterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ParameterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Parameter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ParameterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ParameterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Parameter).
func (m *ParameterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ParameterMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, parameter.FieldName)
	}
	if m.unit != nil {
		fields = append(fields, parameter.FieldUnit)
	}
	if m.datasets != nil {
		fields = append(fields, parameter.FieldDatasetID)
	}
	if m.created_at != nil {
		fields = append(fields, parameter.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ParameterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case parameter.FieldName:
		return m.Name()
	case parameter.FieldUnit:
		return m.Unit()
	case parameter.FieldDatasetID:
		return m.DatasetID()
	case parameter.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ParameterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case parameter.FieldName:
		return m.OldName(ctx)
	case parameter.FieldUnit:
		return m.OldUnit(ctx)
	case parameter.FieldDatasetID:
		return m.OldDatasetID(ctx)
	case parameter.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Parameter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParameterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case parameter.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case parameter.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case parameter.FieldDatasetID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatasetID(v)
		return nil
	case parameter.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Parameter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ParameterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ParameterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParameterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Parameter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ParameterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(parameter.FieldDatasetID) {
		fields = append(fields, parameter.FieldDatasetID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ParameterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ParameterMutation) ClearField(name string) error {
	switch name {
	case parameter.FieldDatasetID:
		m.ClearDatasetID()
		return nil
	}
	return fmt.Errorf("unknown Parameter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ParameterMutation) ResetField(name string) error {
	switch name {
	case parameter.FieldName:
		m.ResetName()
		return nil
	case parameter.FieldUnit:
		m.ResetUnit()
		return nil
	case parameter.FieldDatasetID:
		m.ResetDatasetID()
		return nil
	case parameter.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Parameter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ParameterMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.datasets != nil {
		edges = append(edges, parameter.EdgeDatasets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ParameterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case parameter.EdgeDatasets:
		if id := m.datasets; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ParameterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ParameterMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ParameterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddatasets {
		edges = append(edges, parameter.EdgeDatasets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ParameterMutation) EdgeCleared(name string) bool {
	switch name {
	case parameter.EdgeDatasets:
		return m.cleareddatasets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ParameterMutation) ClearEdge(name string) error {
	switch name {
	case parameter.EdgeDatasets:
		m.ClearDatasets()
		return nil
	}
	return fmt.Errorf("unknown Parameter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ParameterMutation) ResetEdge(name string) error {
	switch name {
	case parameter.EdgeDatasets:
		m.ResetDatasets()
		return nil
	}
	return fmt.Errorf("unknown Parameter edge %s", name)
}

// PredictionMutation represents an operation that mutates the Prediction nodes in the graph.
type PredictionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	data_time     *time.Time
	vals          *schema.DataT
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Prediction, error)
	predicates    []predicate.Prediction
}

var _ ent.Mutation = (*PredictionMutation)(nil)

// predictionOption allows management of the mutation configuration using functional options.
type predictionOption func(*PredictionMutation)

// newPredictionMutation creates new mutation for the Prediction entity.
func newPredictionMutation(c config, op Op, opts ...predictionOption) *PredictionMutation {
	m := &PredictionMutation{
		config:        c,
		op:            op,
		typ:           TypePrediction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPredictionID sets the ID field of the mutation.
func withPredictionID(id uuid.UUID) predictionOption {
	return func(m *PredictionMutation) {
		var (
			err   error
			once  sync.Once
			value *Prediction
		)
		m.oldValue = func(ctx context.Context) (*Prediction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prediction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrediction sets the old Prediction of the mutation.
func withPrediction(node *Prediction) predictionOption {
	return func(m *PredictionMutation) {
		m.oldValue = func(context.Context) (*Prediction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PredictionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PredictionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Prediction entities.
func (m *PredictionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PredictionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PredictionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Prediction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDataTime sets the "data_time" field.
func (m *PredictionMutation) SetDataTime(t time.Time) {
	m.data_time = &t
}

// DataTime returns the value of the "data_time" field in the mutation.
func (m *PredictionMutation) DataTime() (r time.Time, exists bool) {
	v := m.data_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDataTime returns the old "data_time" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldDataTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataTime: %w", err)
	}
	return oldValue.DataTime, nil
}

// ResetDataTime resets all changes to the "data_time" field.
func (m *PredictionMutation) ResetDataTime() {
	m.data_time = nil
}

// SetVals sets the "vals" field.
func (m *PredictionMutation) SetVals(s schema.DataT) {
	m.vals = &s
}

// Vals returns the value of the "vals" field in the mutation.
func (m *PredictionMutation) Vals() (r schema.DataT, exists bool) {
	v := m.vals
	if v == nil {
		return
	}
	return *v, true
}

// OldVals returns the old "vals" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldVals(ctx context.Context) (v schema.DataT, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVals: %w", err)
	}
	return oldValue.Vals, nil
}

// ResetVals resets all changes to the "vals" field.
func (m *PredictionMutation) ResetVals() {
	m.vals = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *PredictionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PredictionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Prediction entity.
// If the Prediction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PredictionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PredictionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the PredictionMutation builder.
func (m *PredictionMutation) Where(ps ...predicate.Prediction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PredictionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PredictionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Prediction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PredictionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PredictionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Prediction).
func (m *PredictionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PredictionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.data_time != nil {
		fields = append(fields, prediction.FieldDataTime)
	}
	if m.vals != nil {
		fields = append(fields, prediction.FieldVals)
	}
	if m.created_at != nil {
		fields = append(fields, prediction.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PredictionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prediction.FieldDataTime:
		return m.DataTime()
	case prediction.FieldVals:
		return m.Vals()
	case prediction.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PredictionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prediction.FieldDataTime:
		return m.OldDataTime(ctx)
	case prediction.FieldVals:
		return m.OldVals(ctx)
	case prediction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Prediction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PredictionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prediction.FieldDataTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataTime(v)
		return nil
	case prediction.FieldVals:
		v, ok := value.(schema.DataT)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVals(v)
		return nil
	case prediction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Prediction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PredictionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PredictionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PredictionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Prediction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PredictionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PredictionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PredictionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Prediction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PredictionMutation) ResetField(name string) error {
	switch name {
	case prediction.FieldDataTime:
		m.ResetDataTime()
		return nil
	case prediction.FieldVals:
		m.ResetVals()
		return nil
	case prediction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Prediction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PredictionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PredictionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PredictionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PredictionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PredictionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PredictionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PredictionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Prediction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PredictionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Prediction edge %s", name)
}

// UserinputMutation represents an operation that mutates the Userinput nodes in the graph.
type UserinputMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	min           *float64
	addmin        *float64
	max           *float64
	addmax        *float64
	step          *float64
	addstep       *float64
	defaultval    *float64
	adddefaultval *float64
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Userinput, error)
	predicates    []predicate.Userinput
}

var _ ent.Mutation = (*UserinputMutation)(nil)

// userinputOption allows management of the mutation configuration using functional options.
type userinputOption func(*UserinputMutation)

// newUserinputMutation creates new mutation for the Userinput entity.
func newUserinputMutation(c config, op Op, opts ...userinputOption) *UserinputMutation {
	m := &UserinputMutation{
		config:        c,
		op:            op,
		typ:           TypeUserinput,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserinputID sets the ID field of the mutation.
func withUserinputID(id uuid.UUID) userinputOption {
	return func(m *UserinputMutation) {
		var (
			err   error
			once  sync.Once
			value *Userinput
		)
		m.oldValue = func(ctx context.Context) (*Userinput, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Userinput.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserinput sets the old Userinput of the mutation.
func withUserinput(node *Userinput) userinputOption {
	return func(m *UserinputMutation) {
		m.oldValue = func(context.Context) (*Userinput, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserinputMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserinputMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Userinput entities.
func (m *UserinputMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserinputMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserinputMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Userinput.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMin sets the "min" field.
func (m *UserinputMutation) SetMin(f float64) {
	m.min = &f
	m.addmin = nil
}

// Min returns the value of the "min" field in the mutation.
func (m *UserinputMutation) Min() (r float64, exists bool) {
	v := m.min
	if v == nil {
		return
	}
	return *v, true
}

// OldMin returns the old "min" field's value of the Userinput entity.
// If the Userinput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserinputMutation) OldMin(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMin: %w", err)
	}
	return oldValue.Min, nil
}

// AddMin adds f to the "min" field.
func (m *UserinputMutation) AddMin(f float64) {
	if m.addmin != nil {
		*m.addmin += f
	} else {
		m.addmin = &f
	}
}

// AddedMin returns the value that was added to the "min" field in this mutation.
func (m *UserinputMutation) AddedMin() (r float64, exists bool) {
	v := m.addmin
	if v == nil {
		return
	}
	return *v, true
}

// ResetMin resets all changes to the "min" field.
func (m *UserinputMutation) ResetMin() {
	m.min = nil
	m.addmin = nil
}

// SetMax sets the "max" field.
func (m *UserinputMutation) SetMax(f float64) {
	m.max = &f
	m.addmax = nil
}

// Max returns the value of the "max" field in the mutation.
func (m *UserinputMutation) Max() (r float64, exists bool) {
	v := m.max
	if v == nil {
		return
	}
	return *v, true
}

// OldMax returns the old "max" field's value of the Userinput entity.
// If the Userinput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserinputMutation) OldMax(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMax is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMax requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMax: %w", err)
	}
	return oldValue.Max, nil
}

// AddMax adds f to the "max" field.
func (m *UserinputMutation) AddMax(f float64) {
	if m.addmax != nil {
		*m.addmax += f
	} else {
		m.addmax = &f
	}
}

// AddedMax returns the value that was added to the "max" field in this mutation.
func (m *UserinputMutation) AddedMax() (r float64, exists bool) {
	v := m.addmax
	if v == nil {
		return
	}
	return *v, true
}

// ResetMax resets all changes to the "max" field.
func (m *UserinputMutation) ResetMax() {
	m.max = nil
	m.addmax = nil
}

// SetStep sets the "step" field.
func (m *UserinputMutation) SetStep(f float64) {
	m.step = &f
	m.addstep = nil
}

// Step returns the value of the "step" field in the mutation.
func (m *UserinputMutation) Step() (r float64, exists bool) {
	v := m.step
	if v == nil {
		return
	}
	return *v, true
}

// OldStep returns the old "step" field's value of the Userinput entity.
// If the Userinput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserinputMutation) OldStep(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStep is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStep requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStep: %w", err)
	}
	return oldValue.Step, nil
}

// AddStep adds f to the "step" field.
func (m *UserinputMutation) AddStep(f float64) {
	if m.addstep != nil {
		*m.addstep += f
	} else {
		m.addstep = &f
	}
}

// AddedStep returns the value that was added to the "step" field in this mutation.
func (m *UserinputMutation) AddedStep() (r float64, exists bool) {
	v := m.addstep
	if v == nil {
		return
	}
	return *v, true
}

// ResetStep resets all changes to the "step" field.
func (m *UserinputMutation) ResetStep() {
	m.step = nil
	m.addstep = nil
}

// SetDefaultval sets the "defaultval" field.
func (m *UserinputMutation) SetDefaultval(f float64) {
	m.defaultval = &f
	m.adddefaultval = nil
}

// Defaultval returns the value of the "defaultval" field in the mutation.
func (m *UserinputMutation) Defaultval() (r float64, exists bool) {
	v := m.defaultval
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultval returns the old "defaultval" field's value of the Userinput entity.
// If the Userinput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserinputMutation) OldDefaultval(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultval is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultval requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultval: %w", err)
	}
	return oldValue.Defaultval, nil
}

// AddDefaultval adds f to the "defaultval" field.
func (m *UserinputMutation) AddDefaultval(f float64) {
	if m.adddefaultval != nil {
		*m.adddefaultval += f
	} else {
		m.adddefaultval = &f
	}
}

// AddedDefaultval returns the value that was added to the "defaultval" field in this mutation.
func (m *UserinputMutation) AddedDefaultval() (r float64, exists bool) {
	v := m.adddefaultval
	if v == nil {
		return
	}
	return *v, true
}

// ResetDefaultval resets all changes to the "defaultval" field.
func (m *UserinputMutation) ResetDefaultval() {
	m.defaultval = nil
	m.adddefaultval = nil
}

// SetName sets the "name" field.
func (m *UserinputMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserinputMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Userinput entity.
// If the Userinput object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserinputMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserinputMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the UserinputMutation builder.
func (m *UserinputMutation) Where(ps ...predicate.Userinput) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserinputMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserinputMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Userinput, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserinputMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserinputMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Userinput).
func (m *UserinputMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserinputMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.min != nil {
		fields = append(fields, userinput.FieldMin)
	}
	if m.max != nil {
		fields = append(fields, userinput.FieldMax)
	}
	if m.step != nil {
		fields = append(fields, userinput.FieldStep)
	}
	if m.defaultval != nil {
		fields = append(fields, userinput.FieldDefaultval)
	}
	if m.name != nil {
		fields = append(fields, userinput.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserinputMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userinput.FieldMin:
		return m.Min()
	case userinput.FieldMax:
		return m.Max()
	case userinput.FieldStep:
		return m.Step()
	case userinput.FieldDefaultval:
		return m.Defaultval()
	case userinput.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserinputMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userinput.FieldMin:
		return m.OldMin(ctx)
	case userinput.FieldMax:
		return m.OldMax(ctx)
	case userinput.FieldStep:
		return m.OldStep(ctx)
	case userinput.FieldDefaultval:
		return m.OldDefaultval(ctx)
	case userinput.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Userinput field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserinputMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userinput.FieldMin:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMin(v)
		return nil
	case userinput.FieldMax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMax(v)
		return nil
	case userinput.FieldStep:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStep(v)
		return nil
	case userinput.FieldDefaultval:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultval(v)
		return nil
	case userinput.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Userinput field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserinputMutation) AddedFields() []string {
	var fields []string
	if m.addmin != nil {
		fields = append(fields, userinput.FieldMin)
	}
	if m.addmax != nil {
		fields = append(fields, userinput.FieldMax)
	}
	if m.addstep != nil {
		fields = append(fields, userinput.FieldStep)
	}
	if m.adddefaultval != nil {
		fields = append(fields, userinput.FieldDefaultval)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserinputMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userinput.FieldMin:
		return m.AddedMin()
	case userinput.FieldMax:
		return m.AddedMax()
	case userinput.FieldStep:
		return m.AddedStep()
	case userinput.FieldDefaultval:
		return m.AddedDefaultval()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserinputMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userinput.FieldMin:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMin(v)
		return nil
	case userinput.FieldMax:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMax(v)
		return nil
	case userinput.FieldStep:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStep(v)
		return nil
	case userinput.FieldDefaultval:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDefaultval(v)
		return nil
	}
	return fmt.Errorf("unknown Userinput numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserinputMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserinputMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserinputMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Userinput nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserinputMutation) ResetField(name string) error {
	switch name {
	case userinput.FieldMin:
		m.ResetMin()
		return nil
	case userinput.FieldMax:
		m.ResetMax()
		return nil
	case userinput.FieldStep:
		m.ResetStep()
		return nil
	case userinput.FieldDefaultval:
		m.ResetDefaultval()
		return nil
	case userinput.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Userinput field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserinputMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserinputMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserinputMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserinputMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserinputMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserinputMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserinputMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Userinput unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserinputMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Userinput edge %s", name)
}
