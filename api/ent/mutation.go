// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/datapoint"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/dataset"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/parameter"
	"github.com/rodzinkaPLN/GrindingOptimalization/api/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDatapoint = "Datapoint"
	TypeDataset   = "Dataset"
	TypeParameter = "Parameter"
)

// DatapointMutation represents an operation that mutates the Datapoint nodes in the graph.
type DatapointMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	data_time         *time.Time
	val               *float64
	addval            *float64
	created_at        *time.Time
	clearedFields     map[string]struct{}
	parameters        *uuid.UUID
	clearedparameters bool
	done              bool
	oldValue          func(context.Context) (*Datapoint, error)
	predicates        []predicate.Datapoint
}

var _ ent.Mutation = (*DatapointMutation)(nil)

// datapointOption allows management of the mutation configuration using functional options.
type datapointOption func(*DatapointMutation)

// newDatapointMutation creates new mutation for the Datapoint entity.
func newDatapointMutation(c config, op Op, opts ...datapointOption) *DatapointMutation {
	m := &DatapointMutation{
		config:        c,
		op:            op,
		typ:           TypeDatapoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatapointID sets the ID field of the mutation.
func withDatapointID(id uuid.UUID) datapointOption {
	return func(m *DatapointMutation) {
		var (
			err   error
			once  sync.Once
			value *Datapoint
		)
		m.oldValue = func(ctx context.Context) (*Datapoint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Datapoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDatapoint sets the old Datapoint of the mutation.
func withDatapoint(node *Datapoint) datapointOption {
	return func(m *DatapointMutation) {
		m.oldValue = func(context.Context) (*Datapoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatapointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatapointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Datapoint entities.
func (m *DatapointMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatapointMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatapointMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Datapoint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDataTime sets the "data_time" field.
func (m *DatapointMutation) SetDataTime(t time.Time) {
	m.data_time = &t
}

// DataTime returns the value of the "data_time" field in the mutation.
func (m *DatapointMutation) DataTime() (r time.Time, exists bool) {
	v := m.data_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDataTime returns the old "data_time" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldDataTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataTime: %w", err)
	}
	return oldValue.DataTime, nil
}

// ResetDataTime resets all changes to the "data_time" field.
func (m *DatapointMutation) ResetDataTime() {
	m.data_time = nil
}

// SetParameterID sets the "parameter_id" field.
func (m *DatapointMutation) SetParameterID(u uuid.UUID) {
	m.parameters = &u
}

// ParameterID returns the value of the "parameter_id" field in the mutation.
func (m *DatapointMutation) ParameterID() (r uuid.UUID, exists bool) {
	v := m.parameters
	if v == nil {
		return
	}
	return *v, true
}

// OldParameterID returns the old "parameter_id" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldParameterID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParameterID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParameterID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParameterID: %w", err)
	}
	return oldValue.ParameterID, nil
}

// ClearParameterID clears the value of the "parameter_id" field.
func (m *DatapointMutation) ClearParameterID() {
	m.parameters = nil
	m.clearedFields[datapoint.FieldParameterID] = struct{}{}
}

// ParameterIDCleared returns if the "parameter_id" field was cleared in this mutation.
func (m *DatapointMutation) ParameterIDCleared() bool {
	_, ok := m.clearedFields[datapoint.FieldParameterID]
	return ok
}

// ResetParameterID resets all changes to the "parameter_id" field.
func (m *DatapointMutation) ResetParameterID() {
	m.parameters = nil
	delete(m.clearedFields, datapoint.FieldParameterID)
}

// SetVal sets the "val" field.
func (m *DatapointMutation) SetVal(f float64) {
	m.val = &f
	m.addval = nil
}

// Val returns the value of the "val" field in the mutation.
func (m *DatapointMutation) Val() (r float64, exists bool) {
	v := m.val
	if v == nil {
		return
	}
	return *v, true
}

// OldVal returns the old "val" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldVal(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVal: %w", err)
	}
	return oldValue.Val, nil
}

// AddVal adds f to the "val" field.
func (m *DatapointMutation) AddVal(f float64) {
	if m.addval != nil {
		*m.addval += f
	} else {
		m.addval = &f
	}
}

// AddedVal returns the value that was added to the "val" field in this mutation.
func (m *DatapointMutation) AddedVal() (r float64, exists bool) {
	v := m.addval
	if v == nil {
		return
	}
	return *v, true
}

// ResetVal resets all changes to the "val" field.
func (m *DatapointMutation) ResetVal() {
	m.val = nil
	m.addval = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DatapointMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DatapointMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Datapoint entity.
// If the Datapoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatapointMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DatapointMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetParametersID sets the "parameters" edge to the Parameter entity by id.
func (m *DatapointMutation) SetParametersID(id uuid.UUID) {
	m.parameters = &id
}

// ClearParameters clears the "parameters" edge to the Parameter entity.
func (m *DatapointMutation) ClearParameters() {
	m.clearedparameters = true
}

// ParametersCleared reports if the "parameters" edge to the Parameter entity was cleared.
func (m *DatapointMutation) ParametersCleared() bool {
	return m.ParameterIDCleared() || m.clearedparameters
}

// ParametersID returns the "parameters" edge ID in the mutation.
func (m *DatapointMutation) ParametersID() (id uuid.UUID, exists bool) {
	if m.parameters != nil {
		return *m.parameters, true
	}
	return
}

// ParametersIDs returns the "parameters" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParametersID instead. It exists only for internal usage by the builders.
func (m *DatapointMutation) ParametersIDs() (ids []uuid.UUID) {
	if id := m.parameters; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParameters resets all changes to the "parameters" edge.
func (m *DatapointMutation) ResetParameters() {
	m.parameters = nil
	m.clearedparameters = false
}

// Where appends a list predicates to the DatapointMutation builder.
func (m *DatapointMutation) Where(ps ...predicate.Datapoint) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatapointMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatapointMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Datapoint, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatapointMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatapointMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Datapoint).
func (m *DatapointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatapointMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.data_time != nil {
		fields = append(fields, datapoint.FieldDataTime)
	}
	if m.parameters != nil {
		fields = append(fields, datapoint.FieldParameterID)
	}
	if m.val != nil {
		fields = append(fields, datapoint.FieldVal)
	}
	if m.created_at != nil {
		fields = append(fields, datapoint.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatapointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case datapoint.FieldDataTime:
		return m.DataTime()
	case datapoint.FieldParameterID:
		return m.ParameterID()
	case datapoint.FieldVal:
		return m.Val()
	case datapoint.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatapointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case datapoint.FieldDataTime:
		return m.OldDataTime(ctx)
	case datapoint.FieldParameterID:
		return m.OldParameterID(ctx)
	case datapoint.FieldVal:
		return m.OldVal(ctx)
	case datapoint.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Datapoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatapointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case datapoint.FieldDataTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataTime(v)
		return nil
	case datapoint.FieldParameterID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParameterID(v)
		return nil
	case datapoint.FieldVal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVal(v)
		return nil
	case datapoint.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Datapoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatapointMutation) AddedFields() []string {
	var fields []string
	if m.addval != nil {
		fields = append(fields, datapoint.FieldVal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatapointMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case datapoint.FieldVal:
		return m.AddedVal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatapointMutation) AddField(name string, value ent.Value) error {
	switch name {
	case datapoint.FieldVal:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVal(v)
		return nil
	}
	return fmt.Errorf("unknown Datapoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatapointMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(datapoint.FieldParameterID) {
		fields = append(fields, datapoint.FieldParameterID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatapointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatapointMutation) ClearField(name string) error {
	switch name {
	case datapoint.FieldParameterID:
		m.ClearParameterID()
		return nil
	}
	return fmt.Errorf("unknown Datapoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatapointMutation) ResetField(name string) error {
	switch name {
	case datapoint.FieldDataTime:
		m.ResetDataTime()
		return nil
	case datapoint.FieldParameterID:
		m.ResetParameterID()
		return nil
	case datapoint.FieldVal:
		m.ResetVal()
		return nil
	case datapoint.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Datapoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatapointMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.parameters != nil {
		edges = append(edges, datapoint.EdgeParameters)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatapointMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case datapoint.EdgeParameters:
		if id := m.parameters; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatapointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatapointMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatapointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparameters {
		edges = append(edges, datapoint.EdgeParameters)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatapointMutation) EdgeCleared(name string) bool {
	switch name {
	case datapoint.EdgeParameters:
		return m.clearedparameters
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatapointMutation) ClearEdge(name string) error {
	switch name {
	case datapoint.EdgeParameters:
		m.ClearParameters()
		return nil
	}
	return fmt.Errorf("unknown Datapoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatapointMutation) ResetEdge(name string) error {
	switch name {
	case datapoint.EdgeParameters:
		m.ResetParameters()
		return nil
	}
	return fmt.Errorf("unknown Datapoint edge %s", name)
}

// DatasetMutation represents an operation that mutates the Dataset nodes in the graph.
type DatasetMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	name              *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	parameters        map[uuid.UUID]struct{}
	removedparameters map[uuid.UUID]struct{}
	clearedparameters bool
	done              bool
	oldValue          func(context.Context) (*Dataset, error)
	predicates        []predicate.Dataset
}

var _ ent.Mutation = (*DatasetMutation)(nil)

// datasetOption allows management of the mutation configuration using functional options.
type datasetOption func(*DatasetMutation)

// newDatasetMutation creates new mutation for the Dataset entity.
func newDatasetMutation(c config, op Op, opts ...datasetOption) *DatasetMutation {
	m := &DatasetMutation{
		config:        c,
		op:            op,
		typ:           TypeDataset,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDatasetID sets the ID field of the mutation.
func withDatasetID(id uuid.UUID) datasetOption {
	return func(m *DatasetMutation) {
		var (
			err   error
			once  sync.Once
			value *Dataset
		)
		m.oldValue = func(ctx context.Context) (*Dataset, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dataset.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDataset sets the old Dataset of the mutation.
func withDataset(node *Dataset) datasetOption {
	return func(m *DatasetMutation) {
		m.oldValue = func(context.Context) (*Dataset, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DatasetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DatasetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Dataset entities.
func (m *DatasetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DatasetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DatasetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dataset.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *DatasetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DatasetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DatasetMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DatasetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DatasetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Dataset entity.
// If the Dataset object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DatasetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DatasetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddParameterIDs adds the "parameters" edge to the Parameter entity by ids.
func (m *DatasetMutation) AddParameterIDs(ids ...uuid.UUID) {
	if m.parameters == nil {
		m.parameters = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.parameters[ids[i]] = struct{}{}
	}
}

// ClearParameters clears the "parameters" edge to the Parameter entity.
func (m *DatasetMutation) ClearParameters() {
	m.clearedparameters = true
}

// ParametersCleared reports if the "parameters" edge to the Parameter entity was cleared.
func (m *DatasetMutation) ParametersCleared() bool {
	return m.clearedparameters
}

// RemoveParameterIDs removes the "parameters" edge to the Parameter entity by IDs.
func (m *DatasetMutation) RemoveParameterIDs(ids ...uuid.UUID) {
	if m.removedparameters == nil {
		m.removedparameters = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.parameters, ids[i])
		m.removedparameters[ids[i]] = struct{}{}
	}
}

// RemovedParameters returns the removed IDs of the "parameters" edge to the Parameter entity.
func (m *DatasetMutation) RemovedParametersIDs() (ids []uuid.UUID) {
	for id := range m.removedparameters {
		ids = append(ids, id)
	}
	return
}

// ParametersIDs returns the "parameters" edge IDs in the mutation.
func (m *DatasetMutation) ParametersIDs() (ids []uuid.UUID) {
	for id := range m.parameters {
		ids = append(ids, id)
	}
	return
}

// ResetParameters resets all changes to the "parameters" edge.
func (m *DatasetMutation) ResetParameters() {
	m.parameters = nil
	m.clearedparameters = false
	m.removedparameters = nil
}

// Where appends a list predicates to the DatasetMutation builder.
func (m *DatasetMutation) Where(ps ...predicate.Dataset) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DatasetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DatasetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dataset, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DatasetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DatasetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dataset).
func (m *DatasetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DatasetMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, dataset.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, dataset.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DatasetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dataset.FieldName:
		return m.Name()
	case dataset.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DatasetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dataset.FieldName:
		return m.OldName(ctx)
	case dataset.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Dataset field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dataset.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case dataset.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Dataset field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DatasetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DatasetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DatasetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dataset numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DatasetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DatasetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DatasetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dataset nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DatasetMutation) ResetField(name string) error {
	switch name {
	case dataset.FieldName:
		m.ResetName()
		return nil
	case dataset.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Dataset field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DatasetMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.parameters != nil {
		edges = append(edges, dataset.EdgeParameters)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DatasetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeParameters:
		ids := make([]ent.Value, 0, len(m.parameters))
		for id := range m.parameters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DatasetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedparameters != nil {
		edges = append(edges, dataset.EdgeParameters)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DatasetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dataset.EdgeParameters:
		ids := make([]ent.Value, 0, len(m.removedparameters))
		for id := range m.removedparameters {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DatasetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparameters {
		edges = append(edges, dataset.EdgeParameters)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DatasetMutation) EdgeCleared(name string) bool {
	switch name {
	case dataset.EdgeParameters:
		return m.clearedparameters
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DatasetMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dataset unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DatasetMutation) ResetEdge(name string) error {
	switch name {
	case dataset.EdgeParameters:
		m.ResetParameters()
		return nil
	}
	return fmt.Errorf("unknown Dataset edge %s", name)
}

// ParameterMutation represents an operation that mutates the Parameter nodes in the graph.
type ParameterMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	name              *string
	unit              *string
	created_at        *time.Time
	clearedFields     map[string]struct{}
	datasets          *uuid.UUID
	cleareddatasets   bool
	datapoints        map[uuid.UUID]struct{}
	removeddatapoints map[uuid.UUID]struct{}
	cleareddatapoints bool
	done              bool
	oldValue          func(context.Context) (*Parameter, error)
	predicates        []predicate.Parameter
}

var _ ent.Mutation = (*ParameterMutation)(nil)

// parameterOption allows management of the mutation configuration using functional options.
type parameterOption func(*ParameterMutation)

// newParameterMutation creates new mutation for the Parameter entity.
func newParameterMutation(c config, op Op, opts ...parameterOption) *ParameterMutation {
	m := &ParameterMutation{
		config:        c,
		op:            op,
		typ:           TypeParameter,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withParameterID sets the ID field of the mutation.
func withParameterID(id uuid.UUID) parameterOption {
	return func(m *ParameterMutation) {
		var (
			err   error
			once  sync.Once
			value *Parameter
		)
		m.oldValue = func(ctx context.Context) (*Parameter, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Parameter.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withParameter sets the old Parameter of the mutation.
func withParameter(node *Parameter) parameterOption {
	return func(m *ParameterMutation) {
		m.oldValue = func(context.Context) (*Parameter, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ParameterMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ParameterMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Parameter entities.
func (m *ParameterMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ParameterMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ParameterMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Parameter.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ParameterMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ParameterMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ParameterMutation) ResetName() {
	m.name = nil
}

// SetUnit sets the "unit" field.
func (m *ParameterMutation) SetUnit(s string) {
	m.unit = &s
}

// Unit returns the value of the "unit" field in the mutation.
func (m *ParameterMutation) Unit() (r string, exists bool) {
	v := m.unit
	if v == nil {
		return
	}
	return *v, true
}

// OldUnit returns the old "unit" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldUnit(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnit: %w", err)
	}
	return oldValue.Unit, nil
}

// ResetUnit resets all changes to the "unit" field.
func (m *ParameterMutation) ResetUnit() {
	m.unit = nil
}

// SetDatasetID sets the "dataset_id" field.
func (m *ParameterMutation) SetDatasetID(u uuid.UUID) {
	m.datasets = &u
}

// DatasetID returns the value of the "dataset_id" field in the mutation.
func (m *ParameterMutation) DatasetID() (r uuid.UUID, exists bool) {
	v := m.datasets
	if v == nil {
		return
	}
	return *v, true
}

// OldDatasetID returns the old "dataset_id" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldDatasetID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatasetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatasetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatasetID: %w", err)
	}
	return oldValue.DatasetID, nil
}

// ClearDatasetID clears the value of the "dataset_id" field.
func (m *ParameterMutation) ClearDatasetID() {
	m.datasets = nil
	m.clearedFields[parameter.FieldDatasetID] = struct{}{}
}

// DatasetIDCleared returns if the "dataset_id" field was cleared in this mutation.
func (m *ParameterMutation) DatasetIDCleared() bool {
	_, ok := m.clearedFields[parameter.FieldDatasetID]
	return ok
}

// ResetDatasetID resets all changes to the "dataset_id" field.
func (m *ParameterMutation) ResetDatasetID() {
	m.datasets = nil
	delete(m.clearedFields, parameter.FieldDatasetID)
}

// SetCreatedAt sets the "created_at" field.
func (m *ParameterMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ParameterMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Parameter entity.
// If the Parameter object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ParameterMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ParameterMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetDatasetsID sets the "datasets" edge to the Dataset entity by id.
func (m *ParameterMutation) SetDatasetsID(id uuid.UUID) {
	m.datasets = &id
}

// ClearDatasets clears the "datasets" edge to the Dataset entity.
func (m *ParameterMutation) ClearDatasets() {
	m.cleareddatasets = true
}

// DatasetsCleared reports if the "datasets" edge to the Dataset entity was cleared.
func (m *ParameterMutation) DatasetsCleared() bool {
	return m.DatasetIDCleared() || m.cleareddatasets
}

// DatasetsID returns the "datasets" edge ID in the mutation.
func (m *ParameterMutation) DatasetsID() (id uuid.UUID, exists bool) {
	if m.datasets != nil {
		return *m.datasets, true
	}
	return
}

// DatasetsIDs returns the "datasets" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// DatasetsID instead. It exists only for internal usage by the builders.
func (m *ParameterMutation) DatasetsIDs() (ids []uuid.UUID) {
	if id := m.datasets; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetDatasets resets all changes to the "datasets" edge.
func (m *ParameterMutation) ResetDatasets() {
	m.datasets = nil
	m.cleareddatasets = false
}

// AddDatapointIDs adds the "datapoints" edge to the Datapoint entity by ids.
func (m *ParameterMutation) AddDatapointIDs(ids ...uuid.UUID) {
	if m.datapoints == nil {
		m.datapoints = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.datapoints[ids[i]] = struct{}{}
	}
}

// ClearDatapoints clears the "datapoints" edge to the Datapoint entity.
func (m *ParameterMutation) ClearDatapoints() {
	m.cleareddatapoints = true
}

// DatapointsCleared reports if the "datapoints" edge to the Datapoint entity was cleared.
func (m *ParameterMutation) DatapointsCleared() bool {
	return m.cleareddatapoints
}

// RemoveDatapointIDs removes the "datapoints" edge to the Datapoint entity by IDs.
func (m *ParameterMutation) RemoveDatapointIDs(ids ...uuid.UUID) {
	if m.removeddatapoints == nil {
		m.removeddatapoints = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.datapoints, ids[i])
		m.removeddatapoints[ids[i]] = struct{}{}
	}
}

// RemovedDatapoints returns the removed IDs of the "datapoints" edge to the Datapoint entity.
func (m *ParameterMutation) RemovedDatapointsIDs() (ids []uuid.UUID) {
	for id := range m.removeddatapoints {
		ids = append(ids, id)
	}
	return
}

// DatapointsIDs returns the "datapoints" edge IDs in the mutation.
func (m *ParameterMutation) DatapointsIDs() (ids []uuid.UUID) {
	for id := range m.datapoints {
		ids = append(ids, id)
	}
	return
}

// ResetDatapoints resets all changes to the "datapoints" edge.
func (m *ParameterMutation) ResetDatapoints() {
	m.datapoints = nil
	m.cleareddatapoints = false
	m.removeddatapoints = nil
}

// Where appends a list predicates to the ParameterMutation builder.
func (m *ParameterMutation) Where(ps ...predicate.Parameter) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ParameterMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ParameterMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Parameter, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ParameterMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ParameterMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Parameter).
func (m *ParameterMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ParameterMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, parameter.FieldName)
	}
	if m.unit != nil {
		fields = append(fields, parameter.FieldUnit)
	}
	if m.datasets != nil {
		fields = append(fields, parameter.FieldDatasetID)
	}
	if m.created_at != nil {
		fields = append(fields, parameter.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ParameterMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case parameter.FieldName:
		return m.Name()
	case parameter.FieldUnit:
		return m.Unit()
	case parameter.FieldDatasetID:
		return m.DatasetID()
	case parameter.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ParameterMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case parameter.FieldName:
		return m.OldName(ctx)
	case parameter.FieldUnit:
		return m.OldUnit(ctx)
	case parameter.FieldDatasetID:
		return m.OldDatasetID(ctx)
	case parameter.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Parameter field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParameterMutation) SetField(name string, value ent.Value) error {
	switch name {
	case parameter.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case parameter.FieldUnit:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnit(v)
		return nil
	case parameter.FieldDatasetID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatasetID(v)
		return nil
	case parameter.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Parameter field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ParameterMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ParameterMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ParameterMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Parameter numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ParameterMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(parameter.FieldDatasetID) {
		fields = append(fields, parameter.FieldDatasetID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ParameterMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ParameterMutation) ClearField(name string) error {
	switch name {
	case parameter.FieldDatasetID:
		m.ClearDatasetID()
		return nil
	}
	return fmt.Errorf("unknown Parameter nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ParameterMutation) ResetField(name string) error {
	switch name {
	case parameter.FieldName:
		m.ResetName()
		return nil
	case parameter.FieldUnit:
		m.ResetUnit()
		return nil
	case parameter.FieldDatasetID:
		m.ResetDatasetID()
		return nil
	case parameter.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Parameter field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ParameterMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.datasets != nil {
		edges = append(edges, parameter.EdgeDatasets)
	}
	if m.datapoints != nil {
		edges = append(edges, parameter.EdgeDatapoints)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ParameterMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case parameter.EdgeDatasets:
		if id := m.datasets; id != nil {
			return []ent.Value{*id}
		}
	case parameter.EdgeDatapoints:
		ids := make([]ent.Value, 0, len(m.datapoints))
		for id := range m.datapoints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ParameterMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeddatapoints != nil {
		edges = append(edges, parameter.EdgeDatapoints)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ParameterMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case parameter.EdgeDatapoints:
		ids := make([]ent.Value, 0, len(m.removeddatapoints))
		for id := range m.removeddatapoints {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ParameterMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareddatasets {
		edges = append(edges, parameter.EdgeDatasets)
	}
	if m.cleareddatapoints {
		edges = append(edges, parameter.EdgeDatapoints)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ParameterMutation) EdgeCleared(name string) bool {
	switch name {
	case parameter.EdgeDatasets:
		return m.cleareddatasets
	case parameter.EdgeDatapoints:
		return m.cleareddatapoints
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ParameterMutation) ClearEdge(name string) error {
	switch name {
	case parameter.EdgeDatasets:
		m.ClearDatasets()
		return nil
	}
	return fmt.Errorf("unknown Parameter unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ParameterMutation) ResetEdge(name string) error {
	switch name {
	case parameter.EdgeDatasets:
		m.ResetDatasets()
		return nil
	case parameter.EdgeDatapoints:
		m.ResetDatapoints()
		return nil
	}
	return fmt.Errorf("unknown Parameter edge %s", name)
}
